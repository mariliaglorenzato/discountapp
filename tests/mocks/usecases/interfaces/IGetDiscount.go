// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	inputs "discountapp/usecases/inputs"

	mock "github.com/stretchr/testify/mock"

	outputs "discountapp/usecases/outputs"
)

// IGetDiscount is an autogenerated mock type for the IGetDiscount type
type IGetDiscount struct {
	mock.Mock
}

// Perform provides a mock function with given fields: discountInput
func (_m *IGetDiscount) Perform(discountInput *inputs.DiscountInput) (*outputs.DiscountOutput, error) {
	ret := _m.Called(discountInput)

	var r0 *outputs.DiscountOutput
	if rf, ok := ret.Get(0).(func(*inputs.DiscountInput) *outputs.DiscountOutput); ok {
		r0 = rf(discountInput)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*outputs.DiscountOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*inputs.DiscountInput) error); ok {
		r1 = rf(discountInput)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIGetDiscount interface {
	mock.TestingT
	Cleanup(func())
}

// NewIGetDiscount creates a new instance of IGetDiscount. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIGetDiscount(t mockConstructorTestingTNewIGetDiscount) *IGetDiscount {
	mock := &IGetDiscount{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
