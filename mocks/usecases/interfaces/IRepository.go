// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	domain "discountapp/domain"

	mock "github.com/stretchr/testify/mock"
)

// IRepository is an autogenerated mock type for the IRepository type
type IRepository struct {
	mock.Mock
}

// CreateClient provides a mock function with given fields: client
func (_m *IRepository) CreateClient(client *domain.Client) (*domain.Client, error) {
	ret := _m.Called(client)

	var r0 *domain.Client
	if rf, ok := ret.Get(0).(func(*domain.Client) *domain.Client); ok {
		r0 = rf(client)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Client)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*domain.Client) error); ok {
		r1 = rf(client)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProduct provides a mock function with given fields: product
func (_m *IRepository) CreateProduct(product *domain.Product) (*domain.Product, error) {
	ret := _m.Called(product)

	var r0 *domain.Product
	if rf, ok := ret.Get(0).(func(*domain.Product) *domain.Product); ok {
		r0 = rf(product)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*domain.Product) error); ok {
		r1 = rf(product)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllClients provides a mock function with given fields:
func (_m *IRepository) GetAllClients() ([]*domain.Client, error) {
	ret := _m.Called()

	var r0 []*domain.Client
	if rf, ok := ret.Get(0).(func() []*domain.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Client)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllProducts provides a mock function with given fields:
func (_m *IRepository) GetAllProducts() ([]*domain.Product, error) {
	ret := _m.Called()

	var r0 []*domain.Product
	if rf, ok := ret.Get(0).(func() []*domain.Product); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClient provides a mock function with given fields: client
func (_m *IRepository) GetClient(client *domain.Client) (*domain.Client, error) {
	ret := _m.Called(client)

	var r0 *domain.Client
	if rf, ok := ret.Get(0).(func(*domain.Client) *domain.Client); ok {
		r0 = rf(client)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Client)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*domain.Client) error); ok {
		r1 = rf(client)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProduct provides a mock function with given fields: product
func (_m *IRepository) GetProduct(product *domain.Product) (*domain.Product, error) {
	ret := _m.Called(product)

	var r0 *domain.Product
	if rf, ok := ret.Get(0).(func(*domain.Product) *domain.Product); ok {
		r0 = rf(product)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*domain.Product) error); ok {
		r1 = rf(product)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewIRepository creates a new instance of IRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIRepository(t mockConstructorTestingTNewIRepository) *IRepository {
	mock := &IRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
